demo()
demo(Japanese)
library(epi)
library(Epi)
library(dplyr)
install.packages(Epi, dplyr)
install.packages(Epi)
install.packages("Epi")
install.packages("Epi", "dplyr", "skimr", "ggplot2")
yes
install.packages("Epi", "dplyr", "skimr", "ggplot2")
install.packages("Epi", "dplyr", "skimr", "ggplot2")
library(Epi)
library(dplyr)
library(skimr)
library(ggplot2)
dieta = na.omit(diet, package = "Epi")
library(Epi)
dieta = na.omit(diet, package = "Epi")
library(skimr)
library(dplyr)
library(ggplot2)
library(Epi)
dieta = na.omit(diet, package = "Epi")
library(Epi)
library(dplyr)
library(skimr)
library(ggplot2)
dieta = na.omit(diet, package = "Epi")
library(Epi)
library(dplyr)
library(skimr)
library(ggplot2)
dieta = na.omit(diet, package = "Epi")
library(Epi)
library(dplyr)
library(skimr)
library(ggplot2)
dieta = na.omit(diet, package = "Epi")
library(GGally)
install.packages(c("GGally", "plotly"))
library(GGally)
library(Epi)
library(dplyr)
library(skimr)
library(ggplot2)
library(GGally)
dieta = data(diet, package = "Epi")
skim(dieta)
medidas = dieta %>%
group_by(as.factor(chd)) %>%
summarise(media = mean(weight),
mediana = media(weight),
desv = sd(weight),
cv = round(desv/media*100, 2))
dieta = na.omit(diet)
skim(dieta)
medidas = dieta %>%
group_by(as.factor(chd)) %>%
summarise(media = mean(weight),
mediana = media(weight),
desv = sd(weight),
cv = round(desv/media*100, 2))
# Tabla
medidas = dieta %>%
group_by(as.factor(chd)) %>%
summarise(media = mean(weight),
mediana = median(weight),
desv = sd(weight),
cv = round(desv/media*100, 2))
View(medidas)
graf1 = ggplot(dieta, # Base
aes(x = as.factor(chd), y = weight, fill = as.factor(chd)))
geom_boxplot()
graf1
graf2 = dieta %>%
select(height, weight, fibre, fat, chd) %>%
transform(chd = factor(chd)) %>%
ggpairs(aes(colour = chd, alpha = 0.1))+
theme_bw()
install.packages("GGally")
install.packages(plotly)
install.packages("plotly")
graf1 = ggplot(dieta, # Base
aes(x = as.factor(chd), y = weight, fill = as.factor(chd))) +
geom_boxplot()
graf1
graf1 = ggplot(dieta, # Base
aes(x = as.factor(chd), y = weight, fill = as.factor(chd))) +
geom_boxplot()
graf1
library(Epi)
library(dplyr)
library(skimr)
library(ggplot2)
library(GGally)
library(plotly)
graf2 = dieta %>%
select(height, weight, fibre, fat, chd) %>%
transform(chd = factor(chd)) %>%
ggpairs(aes(colour = chd, alpha = 0.1))+
theme_bw()
graf2
graf2 = dieta %>%
select(height, weight, fibre, fat, chd) %>%
transform(chd = factor(chd)) %>%
ggpairs(aes(colour = chd, alpha = 0.1))+
theme_bw()
# AED - Práctica 1
library(Epi)
library(dplyr)
library(skimr)
library(ggplot2)
library(GGally)
library(plotly)
dieta = data(diet, package = "Epi")
dieta = na.omit(diet)
# Realizar un descriptivo
skim(dieta)
# Tabla
medidas = dieta %>%
group_by(as.factor(chd)) %>%
summarise(media = mean(weight),
mediana = median(weight),
desv = sd(weight),
cv = round(desv/media*100, 2))
View(medidas)
# De la tabola anterior podemos observar que los pacientes que no presentan
# cardiopatía coronaria pesan en promedio 72.75kg mientras que los que la
# presentan pesan en promedio 70.09.
#
# En cuanto a la mediana, el 50% de los que presentan cardiopatía pesan 73.21kg
# o menos y el otro 50% más que este valor.
#
# Al observar la desviación estándar y el coeficiente de variación para ambos
# grupos, se encontró que aunque los que no presentan cardiopatía tienen una
# desviación más alta no son los más dispersos
# Diagrama de Cajas y bigotes
graf1 = ggplot(dieta, # Base
aes(x = as.factor(chd), y = weight, fill = as.factor(chd))) +
geom_boxplot()
graf1
# Diagrama
graf2 = dieta %>%
select(height, weight, fibre, fat, chd) %>%
transform(chd = factor(chd)) %>%
ggpairs(aes(colour = chd, alpha = 0.1))+
theme_bw()
graf2
setwd("~/Documents/GitHub/MACC_svelez/Análisis Estadístico de Datos")
library(Epi)
library(dplyr)
library(skimr)
library(ggplot2)
library(GGally)
library(plotly)
dieta = data(diet, package = "Epi")
dieta = na.omit(diet)
covarianza = round(cov(dieta[,c(9:13)]),3) # Covarianza
covarianza
correlaciones = round(cor(dieta[,c(9:13)]),3)
correlaciones
View(correlaciones)
promedios = colMeans(dieta[,c(9:13)])
promedios
## Curtosis
??kurtosis
??kurtosis
??kurtosis
library(kurtosis)
install.packages("moments")
library(moments)
?kurtosis
??kurtosis
kurtosis(dieta[,c(9:13)])
skewness(dieta[,c(9:13)])
# Matriz de ceros
matriz.ceros = matrix(0, nrow = 3, ncol = 3); matriz.ceros
# Matriz de unos
matriz.unos = matrix(1, nrow = 3, ncol = 3); matriz.unos
matriz.identidad = matrix(diag(1), nrow=3, ncol = 3); matriz.identidad
matriz.identidad = matrix(diag(1, nrow = 3); matriz.identidad
matriz.identidad = matrix(diag(1, ncol = 3); matriz.identidad
matriz.identidad = diag(1, ncol = 3); matriz.identidad
matriz.identidad = diag(1, nrow = 3); matriz.identidad
A = matrix(c(2,-3,1,0,1,5,4,5,3,0,-1,6), byrow = TRUE, ncol = 4);A
B = matrix(c(4,7,-1,2,0,6,3,1,-2,1,1,4), byrow = TRUE, ncol = 4);B
A + B
A + B
t(A)%*%B
A = matrix(c(20,18,17,19,25,23,21,34,27), byrow = TRUE, ncol = 3);A
det(A)
eigen(A) # valores propios
install.package("matrixcalc")
install.packages("matrixcalc")
)
ctores propios
library(matrixcalc)
is.positive.definite(A)
?eigen
is.positive.definite(matrix(c(4,2,2,4), byrow = TRUE, ncol = 2))
solve(A) # inversa de una matriz
matrix.inverse(A) # otra forma de haxcerlo
install.packages("iris")
install.packages("iris")
data(iris)
install.packages(plot3D)
install.packages("plot3D")
library(plot3D)
library(datasets)
datos = data(iris)
datos = iris
scatter3D(datos$Sepal.Length,
datos$Sepal.Width,
datos$Petal.length,
phi = 0,
bty = "g"
pch = 20,
# Dibujando en 3D
library(plot3D)
library(datasets)
datos = data(iris)
datos = iris
scatter3D(datos$Sepal.Length,
datos$Sepal.Width,
datos$Petal.length,
phi = 0,
bty = "g",
pch = 20,
cex = 2,
ticktype = "detailed")
plot_ly(data=datos,
x =~ datos$Sepal.Length,
y =~ datos$Sepal.Width
col =~ datos$Species,
plot_ly(data=datos,
x =~datos$Sepal.Length,
y =~datos$Sepal.Width
col =~datos$Species,
plot_ly(data=datos,
x =~datos$Sepal.Length,
y =~datos$Sepal.Width,
col =~datos$Species,
text =~paste("Especie:", Specie,
"<br>Longitud del sépalo:"Sepal.Length,
plot_ly(data=datos,
x =~datos$Sepal.Length,
y =~datos$Sepal.Width,
col =~datos$Species,
text =~paste("Especie:", datos$Species,
"<br>Longitud del sépalo:"Sepal.Length,
plot_ly(data=datos,
x =~datos$Sepal.Length,
y =~datos$Sepal.Width,
col =~datos$Species,
text =~paste("Especie:", Species,
"<br>Longitud del sépalo:"Sepal.Length,
plot_ly(data=datos,
x =~datos$Sepal.Length,
y =~datos$Sepal.Width,
col =~datos$Species,
# text =~paste("Especie:", datos$Species,
#               "<br>Longitud del sépalo:"Sepal.Length,
#               "<br>Ancho del sépalo:"Sepal.Width),
mode = "markers",
type = "scatter",
marker = list(size = 10, opacity = 0.8)) %>%
layour(title = "Gráfico interactivo",
xaxis = list(title = "Longitud del sépalo"),
yaxis = list(title = "Ancho del sépalo"),
hovermode = "closest")
plot_ly(data=datos,
x =~datos$Sepal.Length,
y =~datos$Sepal.Width,
col =~datos$Species,
# text =~paste("Especie:", datos$Species,
#               "<br>Longitud del sépalo:"Sepal.Length,
#               "<br>Ancho del sépalo:"Sepal.Width),
mode = "markers",
type = "scatter",
marker = list(size = 10, opacity = 0.8)) %>%
layout(title = "Gráfico interactivo",
xaxis = list(title = "Longitud del sépalo"),
yaxis = list(title = "Ancho del sépalo"),
hovermode = "closest")
plot_ly(data=datos,
x =~datos$Sepal.Length,
y =~datos$Sepal.Width,
col =~datos$Species,
text =~paste("Especie:", datos$Species,
"<br>Longitud del sépalo:"datos$Sepal.Length,
plot_ly(data=datos,
x =~datos$Sepal.Length,
y =~datos$Sepal.Width,
col =~datos$Species,
text = paste("Especie:", datos$Species,
"<br>Longitud del sépalo:"datos$Sepal.Length,
plot_ly(data=datos,
x =~datos$Sepal.Length,
y =~datos$Sepal.Width,
col =~datos$Species,
text = paste("Especie:", datos$Species,
"<br>Longitud del sépalo:" datos$Sepal.Length,
plot_ly(data=datos,
x =~datos$Sepal.Length,
y =~datos$Sepal.Width,
col =~datos$Species,
text = paste("Especie:", datos$Species,
"<br>Longitud del sépalo:"Sepal.Length,
plot_ly(data=datos,
x =~datos$Sepal.Length,
y =~datos$Sepal.Width,
col =~datos$Species,
text = paste0("Especie:", datos$Species,
"<br>Longitud del sépalo:"Sepal.Length,
plot_ly(data=datos,
x =~datos$Sepal.Length,
y =~datos$Sepal.Width,
col =~datos$Species,
text = paste0("Especie:", datos$Species,
"<br>Longitud del sépalo:"Sepal.Length,
plot_ly(data=datos,
x =~datos$Sepal.Length,
y =~datos$Sepal.Width,
col =~datos$Species,
text = paste0("Especie:", datos$Species,
"<br>Longitud del sépalo:"Sepal.Length,
plot_ly(data=datos,
x =~datos$Sepal.Length,
y =~datos$Sepal.Width,
col =~datos$Species,
text = paste("Especie:", datos$Species,
"<br>Longitud del sépalo:",
"<br>Ancho del sépalo:"),
mode = "markers",
type = "scatter",
marker = list(size = 10, opacity = 0.8)) %>%
layout(title = "Gráfico interactivo",
xaxis = list(title = "Longitud del sépalo"),
yaxis = list(title = "Ancho del sépalo"),
hovermode = "closest")
plot_ly(data=datos,
x =~datos$Sepal.Length,
y =~datos$Sepal.Width,
col =~datos$Species,
text = paste("Especie:", datos$Species,
"<br>Longitud del sépalo:",Sepal.Length,
"<br>Ancho del sépalo:",Sepal.Width),
mode = "markers",
type = "scatter",
marker = list(size = 10, opacity = 0.8)) %>%
layout(title = "Gráfico interactivo",
xaxis = list(title = "Longitud del sépalo"),
yaxis = list(title = "Ancho del sépalo"),
hovermode = "closest")
plot_ly(data=datos,
x =~datos$Sepal.Length,
y =~datos$Sepal.Width,
col =~datos$Species,
text = paste("Especie:", datos$Species,
"<br>Longitud del sépalo:"Sepal.Length,
plot_ly(data=datos,
x =~datos$Sepal.Length,
y =~datos$Sepal.Width,
col =~datos$Species,
text = paste("Especie:", datos$Species,
"<br>Longitud del sépalo:"Sepal/.Length,
plot_ly(data=datos,
x =~datos$Sepal.Length,
y =~datos$Sepal.Width,
col =~datos$Species,
text = paste("Especie:", datos$Species,
"<br>Longitud del sépalo:"SepalLength,
